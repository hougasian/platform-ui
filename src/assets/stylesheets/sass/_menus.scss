@use "config";
@use "mixins";
@use "variables";
@use "sass:color";
@use "sass:map";
@use "sass:math";

// Menu
//
// The default menu has a white background with Navy text color. The hover color on the items in the menu is set to a light gray. These colors can be cahnged in the config file.
// You can also invert the colors of the site-menu by adding the classes `.primary` and `.inverted` to the site-menu. This would give the menu a navy background and white text color.
//
// Markup:
// <header class="site-header">
//   <nav class="site-menu">
//     <div class="site-menu__item has-dropdown">
//       <span class="card__header-icon pill--circle-medium background-pink text-white mr-2">
//         <i class="pi-rimdev text-base"></i>
//       </span>
//       <div class="font-lg">
//         Menu Header with avatar
//       </div>
//     </div>
//     <div class="site-menu__item">
//       menu item
//     </div>
//     <div class="site-menu__item has-dropdown">
//       dropdown item
//       <div class="dropdown-menu pin-right hide-mobile-up">
//         <div class="dropdown-menu__item">
//           dropdown
//         </div>
//       </div>
//     </div>
//   </nav>
// </header>
// <header class="site-header mt-5">
//   <nav class="site-menu primary inverted">
//     <div class="site-menu__item has-dropdown">
//       <span class="card__header-icon pill--circle-medium background-pink text-white mr-2">
//         <i class="pi-rimdev text-base"></i>
//       </span>
//       <div class="font-lg">
//         Menu Header with avatar
//       </div>
//     </div>
//     <div class="site-menu__item">
//       menu item
//     </div>
//     <div class="site-menu__item has-dropdown">
//       dropdown item
//       <div class="dropdown-menu pin-right hide-mobile-up">
//         <div class="dropdown-menu__item">
//           dropdown
//         </div>
//       </div>
//     </div>
//   </nav>
// </header>
//
// Weight: -1
//
// Styleguide Menus.Main

// Fixed Header
// 
// To get a fixed header you can set the desired height in the config file. The `site-header` needs the modifier, `site-header--fixed`. This is what gives the header the `position: fixed` style.
// In order to ensure that you have proper space between your header and main content, add the class `header-fixed` to the direct sibling of your `site-header`.
// To see this in action, inspect the header of this style guide.
// 
// Styleguide Menus.Fixed

.site-header {
  display: flex;
  font-family: map.get(config.$fonts, 'base');
  flex-direction: column;

  > .site-menu {
    flex: 1 1 auto;
  }

  &.site-header--fixed {
    position: fixed;
    width: 100%;
    top: 0;
    height: config.$fixed-header-height;
    z-index: 100;

    + .header-fixed {
      margin-top: config.$fixed-header-height;
    }
  }
}

.site-menu {
  background-color: map.get(variables.$greyscale, 'white');
  color: config.$primary-menu-color;
  display: flex;

  &.primary {
    background-color: config.$primary-menu-color;

    .site-menu__item {
      border-left: 1px solid color.adjust(config.$primary-menu-color, $lightness: math.percentage(-.15));
  
      @media (pointer: fine) {
        &:hover {
          &:not(.search):not(.active) {
            background-color: color.adjust(config.$primary-menu-color, $lightness: math.percentage(-.05));
          }
        }
      }
  
      &.has-dropdown {
        @include mixins.breakpoint(tablet, min) {
          position: relative;
        }
  
        @media (pointer: fine) {
          &:hover {
            &:not(.active) {
              border-bottom-color: rgba(config.$primary-menu-color, .5);
            }
          }
        }
  
        &.active {
          border-bottom-color: rgba(config.$primary-menu-color, .5);
        }
      }
  
      &.active {
        background-color: color.adjust(config.$primary-menu-color, $lightness: math.percentage(-.05));
      } 
    }

    .dropdown-menu {
      background-color: color.adjust(config.$primary-menu-color, $lightness: math.percentage(-.05));
  
      &__item {
  
        &:hover {
          background-color: rgba(color.adjust(map.get(variables.$greyscale, 'white'), $lightness: math.percentage(-.05)), .3);
        }
  
        &:not(:first-child) {
          border-top: 1px solid rgba(config.$primary-menu-color, .5);
        }
      }
    }
  }

  &__item {
    border-left: 1px solid color.adjust(map.get(variables.$greyscale, 'lighter'), $lightness: math.percentage(-.15));
    border-bottom: 1px solid transparent;
    cursor: pointer;
    display: flex;
    flex: 0 0 auto;
    padding: 0 map.get(variables.$spacers, 4);
    transition: config.$transitions;
    @extend %flex-center;

    @include mixins.breakpoint(tablet, max) {
      padding: 0 map.get(variables.$spacers, 3 );
    }

    @media (pointer: fine) {
      &:hover {
        &:not(.search):not(.active) {
          background-color: color.adjust(map.get(variables.$greyscale, 'lighter'), $lightness: math.percentage(-.05));
        }
      }
    }

    &.has-dropdown {
      @include mixins.breakpoint(tablet, min) {
        position: relative;
      }

      @media (pointer: fine) {
        &:hover {
          border-bottom-color: rgba(map.get(variables.$greyscale, 'lighter'), .5);
        }
      }

      &.active {
        border-bottom-color: rgba(map.get(variables.$greyscale, 'lighter'), .5);
      }
    }

    &.active {
      background-color: color.adjust(map.get(variables.$greyscale, 'lighter'), $lightness: math.percentage(-.05));
    } 
  }

  .search {
    flex-grow: 1;
    @extend %flex-center;
    

    input[type=text] {
      background: transparent;
      border: none;
      font-weight: lighter;
      width: 100%;
      height: 100%;
      outline: none;

      &::placeholder {
        color: map.get(variables.$greyscale, 'light');
      }
    }
  }

  .dropdown-menu {
    background-color: color.adjust(map.get(variables.$greyscale, 'lighter'), $lightness: math.percentage(-.05));
    position: absolute;
    top: calc(100% + 1px);
    transition: opacity ease config.$transitions, visibility ease config.$transitions;

    @include mixins.breakpoint(tablet, max) {
      height: calc(100vh - #{config.$menu-height});
      overflow-y: scroll;
      width: 100%;
    }

    &__item {
      border-left: 0;
      display: flex;
      justify-content: flex-start;
      padding: map.get(variables.$spacers, 3) map.get(variables.$spacers, 4);

      &:hover {
        background-color: rgba(color.adjust(map.get(variables.$greyscale, 'lighter'), $lightness: math.percentage(-.05)), .3);
      }

      &:not(:first-child) {
        border-top: 1px solid rgba(map.get(variables.$greyscale, 'lighter'), .5);
      }

      &.profile {
        flex-direction: column;
      }

      i[class*="pi-"] {
        padding-right: map.get(variables.$spacers, 3);
        width: 1.2rem;
        @extend %flex-center;
      }
    }
  }

  .agent-profile {
    right: auto;

    @include mixins.breakpoint(tablet, min) {
      width: 35rem;
    }

    // a {
    //   color: $menu-primary-color;
    // }

    address {
      font-style: normal;
    }

    &__content {

      &:nth-of-type(2) {
        border-left: 1px solid map.get(config.$brand-colors, 'med-blue' );

        @include mixins.breakpoint(tablet, max) {
          border-left: none;
          border-top: 1px solid map.get(config.$brand-colors, 'med-blue' );
        }
      }
    }
  }
}

// Icon Menu
//
// When you need a horizontal list of icons, look no further than "Icon Menu". Use the mark up below
// to get the list you want. Be sure to use the specific `icon-menu` classes. With this strcuture you have
// the freedom to use any icon you want and make that icon change to whatever color you want on hover.
// Simpy change the `<icon>` class to the desired font-awesome icon you want. Then, add the `text-{color}--hover`
// class to the `icon-menu__action`. To see a list of available hover colors [click here](/section-typography.html#kssref-typography-utilities-color).
// 
// In the example below, we're using `<div>`s on the `icon-menu__action` to build the menus. You could use a `<button>` or an `<a>` to improve accessibility
// depending on exactly what you need. If you use a less semantic element like `<div>`, we would recommend adding `role="button"`.
// 
// Also notice that the `pointer` class was added to those elements that do not have a `cursor: pointer` applied to them by default.
//
// | <i class="fpi-warning text-orange"></i> Be sure to always wrap the font icon in another element. We don't want to have the click event be on the `<icon>` itself.|
// | ---
//
//
// You can add as many icons as you'd like.
// 
//
// Markup:
// <div class="icon-menu">
//   <div class="icon-menu__item">
//     <div class="icon-menu__action text-negative--hover pointer" role="button">
//       <i class="pi-trash" aria-hidden="hidden"></i>
//     </div>
//   </div>
//   <div class="icon-menu__item">
//     <div class="icon-menu__action text-positive--hover pointer" role="button">
//       <i class="pi-edit" aria-hidden="hidden"></i>
//     </div>
//   </div>
//   <div class="icon-menu__item">
//     <div class="icon-menu__action text-red--hover pointer" role="button">
//       <i class="pi-clock" aria-hidden="hidden"></i>
//     </div>
//   </div>
// </div>
//
// Styleguide Menus.IconMenu

// icon menu
.icon-menu {
  align-items: center;
  display: flex;

  &__item {
    border-right: 1px solid map.get(variables.$greyscale, 'light' );
    padding: 0 map.get(variables.$spacers, 1);
    position: relative;

    &:first-of-type {
      padding-left: 0;
    }

    &:last-of-type {
      border-right: none;
      padding-right: 0;
    }
  }

  &__action {
    color: color.adjust(map.get(variables.$greyscale, 'light'), $lightness: math.percentage(config.$hue-threshold));
    height: variables.$spacer * 1.5;
    width: map.get(variables.$spacers, 4);
    @extend %flex-center;

    &:hover {
      color: map.get(variables.$error-colors, 'default' );
      transform: scale(1.1);
    }
  }
}
