@use "config";
@use "mixins";
@use "variables";
@use "sass:color";
@use "sass:map";
@use "sass:meta";
@use "sass:math";

// Menu
//
// The default menu has a white background with Navy text color. The hover color on the items in the menu is set to a light gray. These colors can be cahnged in the config file.
// You can also invert the colors of the site-menu by adding the classes `.primary` and `.inverted` to the site-menu. This would give the menu a navy background and white text color.
//
// Markup:
// <header class="site-header">
//   <nav class="site-menu">
//     <a href="#" class="site-menu__item">
//      <span class="card__header-icon pill--circle-medium background-pink text-white mr-2">
//        <i class="pi-rimdev text-base"></i>
//      </span>
//      <div class="font-lg">
//        Menu Header with avatar
//      </div>
//     </a>
//     <a href="#" class="site-menu__item">
//       menu item
//     </a>
//     <div class="site-menu__item dropdown">
//       <a href="#" class="dropdown__trigger">
//         dropdown item
//       </a>
//       <div class="dropdown__content pin-right">
//         <a href="#">
//           dropdown
//         </a>
//       </div>
//     </div>
//   </nav>
// </header>
// <header class="site-header mt-5">
//   <nav class="site-menu primary inverted">
//     <a href="#" class="site-menu__item">
//       <span class="card__header-icon pill--circle-medium background-pink text-white mr-2">
//         <i class="pi-rimdev text-base"></i>
//       </span>
//       <div class="font-lg">
//         Menu Header with avatar
//       </div>
//     </a>
//     <a href="#" class="site-menu__item">
//       menu item
//     </a>
//     <div class="site-menu__item dropdown">
//       <a href="#" class="dropdown__trigger">
//         dropdown item
//       </a>
//       <div class="dropdown__content pin-right">
//         <a href="#">
//           dropdown
//         </a>
//       </div>
//     </div>
//   </nav>
// </header>
//
// Weight: -1
//
// Styleguide Menus.Main

// Fixed Header
//
// To get a fixed header you can set the desired height in the config file. The `site-header` needs the modifier, `site-header--fixed`. This is what gives the header the `position: fixed` style.
// In order to ensure that you have proper space between your header and main content, add the class `header-fixed` to the direct sibling of your `site-header`.
// To see this in action, inspect the header of this style guide.
//
// Styleguide Menus.Fixed

.site-header {
  // **Move to platform plugins**

  // display: flex;
  // font-family: map.get(config.$fonts, 'base');
  // flex-direction: column;

  //  > .site-menu {
  //   flex: 1 1 50%;

  //   // sets a max-height of each menu if there are 2 menus
  //   &:nth-child(2),
  //   &:nth-last-child(2) {
  //     max-height: 50%;
  //   }
  // }
  // **Move to platform plugins**

  &.site-header--fixed {
    position: fixed;
    width: 100%;
    top: 0;
    height: config.$menu-height;
    z-index: 100;

    + .header-fixed {
      margin-top: config.$menu-height;
    }
  }
}


// New stuff

$all-colors: () !default;

@if meta.type-of(config.$config-colors) == 'map' {
  $all-colors: map.merge(config.$config-colors, variables.$greyscale);
} @else {
  $all-colors: map.merge(variables.$greyscale, $all-colors);
  @warn "$config-colors is not set or empty";
}

.site-menu {
  display: flex;
  list-style: none;
  padding: 0;

  li {
    margin: 0;
  }


  // default site-menu link hovers
  a {
    color: inherit;
    display: block;
    line-height: 1;
    transition: config.$transitions;
    padding: map.get(variables.$spacers, 2) map.get(variables.$spacers, 3);
  }

  &:not([class*=background-]) {

    a {
      @media (pointer: fine) {
        &:hover {
          &:not(.active) {
            text-shadow: 1px 0 0 currentColor;
          }
        }
      }
    
      &.active {
        text-shadow: 1px 0 0 currentColor;
      }
    }
  }


  // site-menu border on hover
  &.hover-border {

    a {
      position: relative;

      &:after {
        background-color: color.adjust(map.get(config.$platform-colors, 'link'), $lightness: math.percentage(-.15));
        bottom: 0;
        content: '';
        height: 2px;
        left: 1rem;
        opacity: 0;
        position: absolute;
        right: 1rem;
        transition: config.$transitions;
      }

      
      @each $unit, $rem in variables.$spacers {
        &.p-#{$unit} {
          &:after {
            left: $rem;
            right: $rem;
          }
        }

        &.px-#{$unit} {
          &:after {
            left: $rem;
            right: $rem;
          }
        }

        @each $direction, $d in variables.$xy-border {
          &.p#{$d}-#{$unit} {
            &:after {
              #{$direction}: #{$rem};
            }
          }
        }
      }
  
      @media (pointer: fine) {
        &:hover {
          &:not(.active) {

            &:after {
              opacity: 1;
            }
          }
        }
      }
    
      &.active {

        &:after {
          opacity: 1;
        }
      }
    }


    .dropdown-active {

      > .dropdown__trigger {
        
        &:after {
          opacity: 1;
        }
      }
    }

    // Border hover colors
    @each $name, $color in $all-colors {
      &.hover-border--#{$name} {

        a {

          &:after {
            background-color: $color;
          }
        }
      }
    }
  }


  .dropdown__content {
    left: 0;
  }

  .dropdown {

    &:last-of-type {

      .dropdown__content {
        left: auto;
        right: 0;
      }
    }
  }

  // changes position of dropdowns when open
  &.flex--justify-end {

    .dropdown__content {
      left: auto;
      right: 0;
    }

    .dropdown {

      &:first-of-type {
        
        .dropdown__content {
          left: 0;
          right: auto;
        }
      }
    }
  }


  // Color specific 
  @each $name, $color in $all-colors {
    &.background-#{$name} {
      background-color: $color !important;

      a {
        @if lightness($color) > 50 {
          color: map.get(variables.$greyscale, 'dark');
        } @else {
          color: map.get(variables.$greyscale, 'white');
        }
  
        &.active {
          background-color: color.adjust($color, $lightness: math.percentage(-.1));
        }
  
        @media (pointer: fine) {
          &:hover {
            &:not(.active) {
              background-color: color.adjust($color, $lightness: math.percentage(-.05));
            }
          }
        }
      }

      .dropdown-active {
        @if lightness($color) > 50 {
          color: map.get(variables.$greyscale, 'dark');
        } @else {
          color: map.get(variables.$greyscale, 'white');
        }

        > .dropdown__trigger {
          background-color: color.adjust($color, $lightness: math.percentage(-.05));
          
          @if lightness($color) > 50 {
            color: map.get(variables.$greyscale, 'dark');
          } @else {
            color: map.get(variables.$greyscale, 'white');
          }
        }
      }

      .dropdown__content {
        background-color: $color;
        border-color: $color;
      }
    }
  }
}


// Dropdown
.dropdown {
  display: flex;
  position: relative;

  ul,
  ol {
    list-style: none;
    padding: 0;
  }

  &.dropdown-active {

    > .dropdown__trigger {
      color: color.adjust(map.get(config.$platform-colors, 'link'), $lightness: math.percentage(-.15));
      
      + .dropdown__content {
        max-height: 100vh;
        overflow-y: auto;
        overflow-x: hidden;
        visibility: visible;
        z-index: 6;
      }
    }
  }

  .dropdown__trigger {
    align-items: center;
    display: flex;
  }
  
  .dropdown__content {
    background-color: map.get(variables.$greyscale, 'white');
    border: 1px solid map.get(variables.$greyscale, 'lighter');
    height: auto;
    left: 0;
    max-height: 0;
    min-width: 12rem;
    width: 100%;
    overflow: hidden;
    position: absolute;
    transition: all .2s ease-in-out;
    top: 100%;
    visibility: hidden;
    z-index: 5;

    a {
      padding: .75rem variables.$spacer;
    }
  }
}




// Responsive Menu
// 
// If you want the site menu to be responsive, add the class `site-menu-wrapper` to the parent element of the `site-menu`. 
// In the example below, the class is added to the `header`. You will also need to add a button to toggle the menu. Below, you see we 
// added a button with the class `site-menu-mobile-action`. For accessibility purposes, we included button text with an `sr-only` class. 
// The menu mobile menu will respond below the `tablet` resolution and the menu button will display as well.
// If you want to add an icon to the dropdown targets, make sure the icon has the class `dropdown__trigger-icon`. This icon will rotate when the dropdown
// is active. In the example below we're using a platform icon. `<i class="pi-angle-right mx-2 dropdown__trigger-icon"></i>`
// 
// 
// Markup: 
// <header class="background-teal site-menu-wrapper py-3 px-3">
//   <div class="block-container flex--justify-between">
//     <div class="block block--shrink">
//       <img src="https://dummyimage.com/150x50/fff/aaa" alt="Logo">
//     </div>
//     <button class="site-menu-mobile-action button--plain text-white">
//       <span class="sr-only">Toggle Navigation</span>
//       <i aria-hidden="true" focusable="false" class="pi-menu pi-xl"></i>
//     </button>
//     <nav class="site-menu background-teal inverted">
//       <div class="site-menu__item">
//         <a href="#" class="dropdown__trigger">
//           About
//         </a>
//       </div>
//       <div class="site-menu__item dropdown">
//         <a href="#" class="dropdown__trigger flex flex--justify-between w-100">
//           Blog <i class="pi-angle-right mx-2 dropdown__trigger-icon"></i>
//         </a>
//         <div class="dropdown__content pin-right">
//           <a href="#">
//             Blog Post
//           </a>
//           <a href="#">
//             Blog Post
//           </a>
//           <a href="#">
//             Blog Post
//           </a>
//         </div>
//       </div>
//       <div class="site-menu__item dropdown">
//         <a href="#" class="dropdown__trigger flex flex--justify-between w-100">
//           Dropdown <i class="pi-angle-right mx-2 dropdown__trigger-icon"></i>
//         </a>
//         <div class="dropdown__content pin-right">
//           <a href="#">
//             Dropdown Item
//           </a>
//           <a href="#">
//             Dropdown Item
//           </a>
//           <a href="#">
//             Dropdown Item
//           </a>
//         </div>
//       </div>
//       <div class="site-menu__item">
//         <a href="#" class="dropdown__trigger">
//           Contact
//         </a>
//       </div>
//       <div class="site-menu__item">
//         <a href="#" class="dropdown__trigger">
//           Events
//         </a>
//       </div>
//     </nav>
//   </div>
// </header>
// 
// Styleguide Menus.Responsive

// *****************
// Mobile site menu
// *****************

.site-menu-wrapper {
  @media (max-width: (config.$show-mobile-menu - 1)) {
    position: relative;
  }

  .site-menu-mobile-action {

    @media (min-width: (config.$show-mobile-menu)) {
      display: none;
    }

    > * {
      pointer-events: none;
    }
  }

  @media (max-width: (config.$show-mobile-menu - 1)) {

    .site-menu {
      flex-direction: column;
      left: 0;
      max-height: 0;
      position: absolute;
      right: 0;
      top: 100%;
      transition: max-height config.$transitions ease-out;
      overflow: hidden;
  
      &.active {
        max-height: 100vh;
        transition: max-height config.$transitions ease-in;
        z-index: 2;
      }
    }

    .dropdown {
      flex-direction: column;
      justify-content: center;

      .dropdown__content {
        position: static;
      }
    }

    // Accounts for fixed header height and max-height of open nav
    &.site-header--fixed,
    .site-header--fixed & {

      .site-menu {

        &.active {
          max-height: calc(100vh - var(--menu-height));
          overflow-y: auto;
          overflow-x: hidden;
        }
      }
    }
  }
}




// Icon Menu
//
// When you need a horizontal list of icons, look no further than "Icon Menu". Use the mark up below
// to get the list you want. Be sure to use the specific `icon-menu` classes. With this strcuture you have
// the freedom to use any icon you want and make that icon change to whatever color you want on hover.
// Simpy change the `<icon>` class to the desired font-awesome icon you want. Then, add the `text-{color}--hover`
// class to the `icon-menu__action`. To see a list of available hover colors [click here](/section-typography.html#kssref-typography-utilities-color).
//
// In the example below, we're using `<div>`s on the `icon-menu__action` to build the menus. You could use a `<button>` or an `<a>` to improve accessibility
// depending on exactly what you need. If you use a less semantic element like `<div>`, we would recommend adding `role="button"`.
//
// Also notice that the `pointer` class was added to those elements that do not have a `cursor: pointer` applied to them by default.
// 
// Adding `icon-menu icon-menu--vertical` creates a vertical icon menu.
//
// | <i class="fpi-warning text-orange"></i> Be sure to always wrap the font icon in another element. We don't want to have the click event be on the `<icon>` itself.|
// | ---
//
//
// You can add as many icons as you'd like.
//
//
// Markup:
// <div class="icon-menu">
//   <div class="icon-menu__item">
//     <button class="icon-menu__action button--plain text-negative--hover pointer">
//       <i class="pi-trash" aria-hidden="hidden"></i>
//     </button>
//   </div>
//   <div class="icon-menu__item">
//     <button class="icon-menu__action button--plain text-positive--hover pointer">
//       <i class="pi-edit" aria-hidden="hidden"></i>
//     </button>
//   </div>
//   <div class="icon-menu__item">
//     <button class="icon-menu__action button--plain text-red--hover pointer">
//       <i class="pi-clock" aria-hidden="hidden"></i>
//     </button>
//   </div>
// </div>
// <div class="icon-menu icon-menu--vertical">
//   <div class="icon-menu__item">
//     <button class="icon-menu__action button--plain text-negative--hover pointer">
//       <i class="pi-trash" aria-hidden="hidden"></i>
//     </button>
//   </div>
//   <div class="icon-menu__item">
//     <button class="icon-menu__action button--plain text-positive--hover pointer">
//       <i class="pi-edit" aria-hidden="hidden"></i>
//     </button>
//   </div>
// </div>
//
// Styleguide Menus.IconMenu

// icon menu
.icon-menu {
  $self: &;
  align-items: center;
  display: flex;

  &__item {
    border-right: 1px solid map.get(variables.$greyscale, 'light' );
    position: relative;

    &:first-of-type {
      padding-left: 0;
    }

    &:last-of-type {
      border-right: none;
      padding-right: 0;
    }
  }

  &__action {
    color: color.adjust(map.get(variables.$greyscale, 'light'), $lightness: math.percentage(config.$hue-threshold));
    @include mixins.square(variables.$spacer * 1.5);
    @extend %flex-center;

    &:hover {
      color: map.get(variables.$error-colors, 'default' );
      transform: scale(1.1);
    }
  }

  &--vertical {
    flex-direction: column;
    justify-content: center;
    #{$self}__item {
      border: 0;
      border-bottom: 1px solid map.get(variables.$greyscale, 'light' );
      padding: map.get(variables.$spacers, 1) 0;
      &:last-of-type {
        border-bottom: none;
      }
    }
  }
}
