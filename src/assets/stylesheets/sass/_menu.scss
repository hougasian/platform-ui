@use "config";
@use "mixins";
@use "variables";
@use "sass:color";
@use "sass:map";
@use "sass:math";

// Menu
//
// The default menu is `position: fixed` and `background-navy`, both of which can be overridden on `.site-header`.
// Adding `pos-rel` removes the default `fixed` positioning, and the menu background color default of
// `background-navy`can be overridden by adding a [background color](/section-color.html) using `background-{ color }`.
//
// Markup:
// <header class="site-header pos-rel background-base">
//   <nav class="site-menu">
//     <div class="site-menu__item has-dropdown">
//       <span class="card__header-icon pill--circle-medium background-pink text-white mr-2">
//         <i class="fas fa-chess-knight text-base"></i>
//       </span>
//       <div class="font-lg">
//         Menu Header with avatar
//       </div>
//   </div>
//   <div class="site-menu__item">
//     menu item
//   </div>
//   <div class="site-menu__item has-dropdown">
//     dropdown item
//     <div class="dropdown-menu pin-right hide-mobile-up">
//       <div class="dropdown-menu__item">
//         dropdown
//       </div>
//     </div>
//   </div>
// </nav>
// </header>
//
// Weight: -1
//
// Styleguide Menus.Main

.site-header {
  background-color: map.get(config.$platform-colors, 'menu');
  color: map.get(variables.$greyscale, 'white');
  display: flex;
  font-size: map.get(variables.$font-percentage, 'md');
  height: config.$menu-height;
  position: fixed;
  width: 100%;
  z-index: 100;
  public-menu-cmp {
    width: 100%;
  }
}

.site-menu {
  $menu-primary-color: map.get(variables.$greyscale, 'white');

  $dropdown-background: color.adjust(map.get(config.$brand-colors, 'navy' ), $lightness: math.percentage(config.$hue-threshold * 0.5));
  display: flex;
  flex-grow: 1;
  width: 100%;
  height: 100%;

  @include mixins.breakpoint(tablet, max) {
    position: relative;
  }

  .agent-profile__gear {
    .fa-cog {
      opacity: config.$opacity / 2;
    }
    &:hover {
      .fa-cog {
        opacity: 1;
        animation: spin config.$transitions * 4;
      }
    }
  }

  .search {
    color: $menu-primary-color;
    flex-grow: 1;
    @extend %flex-center;

    // flexing component
    // pui-search {
    //   display: flex;
    //   width: 100%;
    // }

    input[type=text] {
      background: transparent;
      border: none;
      color: inherit;
      font-size: map.get(variables.$font-percentage, 'lg');
      font-weight: lighter;
      width: 100%;
      height: 100%;
      outline: none;

      &::placeholder {
        color: map.get(variables.$greyscale, 'light');
      }
    }
  }

  &__item {
    border-left: 1px solid rgba(map.get(variables.$greyscale, 'light'), .5);
    border-bottom: 1px solid transparent;
    color: $menu-primary-color;
    cursor: pointer;
    display: flex;
    flex: 0 0 auto;
    font-size: map.get(variables.$font-percentage, 'sm');
    line-height: 1.5;
    padding: 0 map.get(variables.$spacers, 4);
    transition: config.$transitions;
    @extend %flex-center;

    @include mixins.breakpoint(tablet, max) {
      padding: 0 map.get(variables.$spacers, 3 );
    }

    @media (pointer: fine) {
      &:hover:not(.search) {
        background-color: $dropdown-background;
        color: $menu-primary-color;
      }
    }

    &.has-dropdown {
      @include mixins.breakpoint(tablet, min) {
        position: relative;
      }

      @media (pointer: fine) {
        &:hover {
          border-bottom-color: rgba(map.get(variables.$greyscale, 'light'), .5);
        }
      }
    }

    &.active {
      background-color: $dropdown-background;
      border-bottom-color: rgba(map.get(variables.$greyscale, 'light'), .5);
      color: $menu-primary-color;
    }
  }

  .dropdown-menu {
    background-color: $dropdown-background;
    position: absolute;
    top: calc(100% + 1px);
    transition: opacity ease config.$transitions, visibility ease config.$transitions;

    @include mixins.breakpoint(tablet, max) {
      height: calc(100vh - #{config.$menu-height});
      overflow-y: scroll;
      width: 100%;
    }

    &__item {
      border-left: 0;
      display: flex;
      justify-content: flex-start;
      padding: map.get(variables.$spacers, 3) map.get(variables.$spacers, 4);

      &:hover {
        background-color: rgba($menu-primary-color, .3);
      }

      &:not(:first-child) {
        border-top: 1px solid rgba(map.get(variables.$greyscale, 'light'), .5);
      }

      &.profile {
        flex-direction: column;
      }

      i[class*="fa-"] {
        padding-right: map.get(variables.$spacers, 3);
        width: 1.2rem;
        @extend %flex-center;
      }
    }
  }

  .agent-profile {
    right: auto;

    @include mixins.breakpoint(tablet, min) {
      width: 35rem;
    }

    a {
      color: $menu-primary-color;
    }

    address {
      font-style: normal;
    }

    &__content {

      &:nth-of-type(2) {
        border-left: 1px solid map.get(config.$brand-colors, 'med-blue' );

        @include mixins.breakpoint(tablet, max) {
          border-left: none;
          border-top: 1px solid map.get(config.$brand-colors, 'med-blue' );
        }
      }
    }
  }
}

.agent-contact {
  height: calc(100vh - #{config.$menu-height});
  max-height: 41.5rem;
  overflow-y: scroll;
  width: 25rem;
}

.crm-actions {

  $primary-background: map.get(variables.$greyscale, 'white');

  background-color: $primary-background;
  grid-row-start: 2;
  // must add .crm-actions__stats height
  height: calc(100% - #{config.$menu-height});
}

.crm-menu {

  $primary-background: map.get(variables.$greyscale, 'white');

  display: flex;
  flex-direction: column;
  flex: 1;
  overflow: visible;

  @include mixins.breakpoint(tablet, max) {
    overflow-x: hidden;
    overflow-y: scroll;
    padding-bottom: map.get(variables.$spacers, 4 );
  }

  .toggle & {
    @include mixins.breakpoint(config.$max-height, max-height) {
      overflow-y: scroll;
      overflow: -moz-scrollbars-none;
      -ms-overflow-style: none;

      &::-webkit-scrollbar {
        width: 0 !important
      }
    }
  }

  &__group {
    display: flex;
    flex: 1;
    flex-direction: column;
    width: 100%;

    @include mixins.breakpoint(tablet, max) {
      flex-direction: row;
    }

    .toggle & {
      flex-direction: row;
    }

    .crm-menu__item {

      @include mixins.breakpoint(tablet, max) {
        padding: variables.$spacer 0;

        &[data-pui-tooltip] {
          &:hover:after {
            background-color: inherit;
            border-radius: inherit;
            content: "\f058";
            left: inherit;
            padding: 0;
          }
        }
        span {
          display: block;
        }
        img {
          left: variables.$spacer;
          margin-bottom: variables.$spacer / 2;
          max-width: variables.$spacer * 4;
          max-height: map.get(variables.$spacers, 5);
          margin: 0 map.get(variables.$spacers, 2);
          &.mini-image {
            display: none;
          }
          &:not(.mini-image) {
            display: block;
          }
        }
        &:not(.active) {
          &[data-pui-tooltip]:hover:after {
            display: none;
          }
        }
        &.active {
          pointer-events: none;
        }
      }
    }
  }

  &__item {
    align-items: center;
    background-color: $primary-background;
    box-sizing: border-box;
    box-shadow: 0 0 0 0;
    border-right: 1px solid rgba(map.get(variables.$greyscale, 'light'), .3);
    border-top: 1px solid rgba(map.get(variables.$greyscale, 'light'), .3);
    color: map.get(variables.$greyscale, 'base' );
    cursor: pointer;
    display: flex;
    flex: 1;
    font-weight: normal;
    justify-content: center;
    padding: 0rem;
    width: 100%;
    transition: config.$transitions;
    flex-direction: column;

    @media (pointer: fine) {
      &:hover {
        box-shadow: inset 0 0 0 2px map.get(config.$brand-colors, 'salmon');
        text-shadow: 1px 0 0 currentColor;
        position: relative;
      }
    }

    &.active {
      box-shadow: inset 0 0 0 2px map.get(config.$brand-colors, 'salmon');
      text-shadow: 1px 0 0 currentColor;
      position: relative;
    }

    // aside open at tablet + resolutions
    .toggle & {
      justify-content: space-around;
      padding: variables.$spacer map.get(variables.$spacers, 1 );
      &[data-pui-tooltip] {
        &:hover:after {
          background-color: inherit;
          border-radius: inherit;
          content: "\f058";
          left: inherit;
          padding: 0;
        }
      }
      span {
        display: block;
        text-align: center;
      }
      img {
        left: variables.$spacer;
        margin-bottom: variables.$spacer / 2;
        max-width: variables.$spacer * 4;
        max-height: map.get(variables.$spacers, 5);
        margin: 0 map.get(variables.$spacers, 2);
        &.mini-image {
          display: none;
        }
        &:not(.mini-image) {
          display: block;
        }
      }
      &:not(.active) {
        &[data-pui-tooltip]:hover:after {
          display: none;
        }
      }
      &.active {
        pointer-events: none;
        &:before {
          background-color: map.get(variables.$greyscale, 'white');
          border-radius: map.get(config.$radius, 'button') * 100;
          content: "";
          height: 26px;
          width: 26px;
          position: absolute;
          right: -.8rem;
          z-index: 5;
        }

        &:after {
          color: map.get(config.$brand-colors, 'salmon');
          content: "\f058";
          font-family: "Font Awesome 5 Pro";
          font-weight: bold;
          font-size: map.get(variables.$font-percentage, 'xxl');
          position: absolute;
          right: -(map.get(variables.$spacers, 3));
          z-index: 10;
        }
      }
    }

    img {
      max-height: variables.$spacer * 1.5;
      transition: config.$transitions;

      &:not(.mini-image) {
        display: none;
      }
    }

    &.active {
      &:before, &:after {
        top: 40%;
      }
    }

    span {
      display: none;
    }
  }
}

.crm-actions__stats {
  border-top: 1px solid rgba(map.get(variables.$greyscale, 'white'), .3);
  color: map.get(variables.$greyscale, 'white');
  display: flex;
  flex-direction: column;
  height: 100%;

  @include mixins.breakpoint(tablet, min) {
    background-color: map.get(config.$platform-colors, 'menu');
  }

  &-header {
    color: rgba(map.get(variables.$greyscale, 'white'), .6);
    font-family: "Roboto Slab";
    font-size: map.get(variables.$font-percentage, 'xl');
    padding: map.get(variables.$spacers, 3);
    width: 100%;
    @extend %flex-center;
  }

  &-group {
    border-bottom: 1px solid rgba(map.get(variables.$greyscale, 'white'), .3);
    display: flex;
    justify-content: space-around;
    padding: map.get(variables.$spacers, 3) 0;
  }

  .crm-actions__stat {
    align-items: center;
    display: flex;
    font-size: map.get(variables.$font-percentage, 'xxl');
    font-weight: bold;
    flex-direction: column;
    text-transform: uppercase;
  }

  .crm-actions__stat-label {
    color: rgba(map.get(variables.$greyscale, 'white'), .6);
    font-size: map.get(variables.$font-percentage, 'xxs') !important;
    font-weight: normal;
    text-align: center;
  }

  .today {
    height: 12rem;
    transform: rotate(-90deg);
    transition: config.$transitions;
    white-space: nowrap;
    @extend %flex-center;

    @media (max-height: 600px) {
      display: none;
    }

    @include mixins.breakpoint(tablet, max) {
      background-color: map.get(config.$platform-colors, 'menu');
      border-top: 1px solid rgba(map.get(variables.$greyscale, 'white'), .3);
      height: auto;
      left: 0;
      padding: map.get(variables.$spacers, 3);
      position: fixed;
      right: 0;
      top: 4.5rem;
      transform: rotate(0deg);
    }

    .toggle & {
      height: auto;
      padding: map.get(variables.$spacers, 3);
      transform: rotate(0deg);
    }
  }
}

.mobile-menu-action-wrapper {
  background-color: map.get(config.$brand-colors, 'navy' );
  bottom: 0;
  height: 3rem;
  left: 0;
  position: fixed;
  right: 0;
  z-index: 2;

  @include mixins.breakpoint(tablet, min) {
    display: none;
  }
}

.mobile-menu-action {
  background-color: map.get(config.$brand-colors, 'navy' );
  border-radius: 50%;
  box-shadow: 0 0 0 .3rem map.get(variables.$greyscale, 'white' );
  color: map.get(variables.$greyscale, 'white' );
  cursor: pointer;
  flex-direction: column;
  left: 50%;
  position: absolute;
  transition: config.$transitions;
  transform: translate(-50%, -50%);
  top: 0;
  @extend %flex-center;
  @include mixins.square(3.5rem);

  @include mixins.breakpoint(tablet, min) {
    display: none;
  }

  .menu-open & {
    background-color: map.get(config.$brand-colors, 'salmon');
  }

  i {
    font-size: map.get(variables.$font-percentage, 'xl' );
  }

  &__copy {
    font-size: map.get(variables.$font-percentage, 'xxs' );
    text-transform: uppercase;
  }
}

// Icon Menu
//
// When you need a horizontal list of icons, look no further than "Icon Menu". Use the mark up below
// to get the list you want. Be sure to use the specific `icon-menu` classes. With this strcuture you have
// the freedom to use any icon you want and make that icon change to whatever color you want on hover.
// Simpy change the `<icon>` class to the desired font-awesome icon you want. Then, add the `text-{color}--hover`
// class to the `icon-menu__action`. To see a list of available hover colors [click here](/section-typography.html#kssref-typography-utilities-color).
//
// | <i class="fas fa-exclamation-triangle text-orange"></i> Be sure to always wrap the font icon in another element. We don't want to have the click event be on the `<icon>` itself.|
// | ---
//
//
// You can add as many icons as you'd like.
//
// Markup:
// <div class="icon-menu">
//   <div class="icon-menu__item">
//     <a href="#" class="icon-menu__action text-negative--hover" role="button">
//       <i class="fas fa-trash-alt" aria-hidden="true"></i>
//     </a>
//   </div>
//   <div class="icon-menu__item">
//     <a href="#" class="icon-menu__action text-positive--hover" role="button">
//       <i class="fas fa-edit" aria-hidden="true"></i>
//     </a>
//   </div>
// </div>
// <div class="my-3"></div>
// <div class="icon-menu">
//   <div class="icon-menu__item">
//     <a href="#" class="icon-menu__action text-negative--hover" role="button">
//       <i class="fas fa-trash-alt" aria-hidden="hidden"></i>
//     </a>
//   </div>
//   <div class="icon-menu__item">
//     <a href="#" class="icon-menu__action text-positive--hover" role="button">
//       <i class="fas fa-edit" aria-hidden="hidden"></i>
//     </a>
//   </div>
//   <div class="icon-menu__item">
//     <a href="#" class="icon-menu__action" role="button">
//       <i class="far fa-clock" aria-hidden="hidden"></i>
//     </a>
//   </div>
// </div>
// <div class="my-3"></div>
// <div class="icon-menu">
//   <div class="icon-menu__item">
//     <a href="#" class="icon-menu__action text-navy--hover" role="button">
//       <i class="fas fa-trash-alt" aria-hidden="hidden"></i>
//     </a>
//   </div>
//   <div class="icon-menu__item">
//     <a href="#" class="icon-menu__action text-violet--hover" role="button">
//       <i class="fas fa-edit" aria-hidden="hidden"></i>
//     </a>
//   </div>
//   <div class="icon-menu__item">
//     <a href="#" class="icon-menu__action text-salmon--hover" role="button">
//       <i class="far fa-clock" aria-hidden="hidden"></i>
//     </a>
//   </div>
// </div>
//
// Styleguide Menus.IconMenu

// icon menu
.icon-menu {
  align-items: center;
  display: flex;

  &__item {
    border-right: 1px solid map.get(variables.$greyscale, 'light' );
    padding: 0 map.get(variables.$spacers, 1);
    position: relative;

    &:first-of-type {
      padding-left: 0;
    }

    &:last-of-type {
      border-right: none;
      padding-right: 0;
    }
  }

  &__action {
    color: color.adjust(map.get(variables.$greyscale, 'light'), $lightness: math.percentage(config.$hue-threshold));
    height: variables.$spacer * 1.5;
    width: map.get(variables.$spacers, 4);
    @extend %flex-center;

    &:hover {
      color: map.get(variables.$error-colors, 'default' );
      transform: scale(1.1);
    }
  }
}
