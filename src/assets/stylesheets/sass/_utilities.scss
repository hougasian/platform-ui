@import "utilities/display";
@import "utilities/flex";
@import "utilities/icons";
@import "utilities/spacers";
@import "utilities/colors";
@import "utilities/typography";
@import "utilities/borders";

.rotate-45 {
  @extend %rotate-45;
}

.rotate-180 {
  @extend %rotate-180;
}

.float-right {
  float: right;
}

// add-on to animate.css to speed up
.animated.fastest {
  animation-duration: $transitions;
}

.transparent {
  background: transparent;
  border-color: transparent;
}

.inverted {
  color: map-get($greyscale, 'white') !important;
  transition: $transitions;
}

.close-action {
  @each $position in ('left', 'right') {
    &.#{$position} {
      position: absolute;
      #{$position}: map-get($spacers,4);
      top: $spacer;
    }
  }
}

.fa-spinner {
  animation: spin 2s infinite linear;
}

.sr-only {
  // https://a11yproject.com/posts/how-to-hide-content/
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  overflow: hidden;
  position: absolute !important;
}

%rim-loader,
.rim-loader {
  animation: rotation 1s infinite linear;
  border: 2px solid rgba(160, 160, 160, 0.2);
  border-radius: 50%;
  border-top-color: rgba(160, 160, 160, 0.7);
  height: 1.4em;
  width: 1.4em;
}

.pointer {
  cursor: pointer;
}


.check-circle {
  align-items: center;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}


// Position
//
// If you need to postion something absolute you can use the following classes.
//
// Remember that when positioning an element absolute, the element will position
// according to the closest parent element that has `position: relative`. For this
// you can use the class `pos-rel` on the parent element you want to position the
// absolute element to.
//
// | Class                  | Position              | X-Axis                                    | Y-Axis                                     |
// | ---------------------- | --------------------- | ----------------------------------------- | ------------------------------------------ |
// | `pos-rel`              | `position: relative`  |                                           |                                            |
// | `pos-abs`              | `position: absolute`  |                                           |                                            |
// | `pin-top`              |                       |                                           | `top: 0`                                   |
// | `pin-right`            |                       | `right: 0`                                |                                            |
// | `pin-bottom`           |                       |                                           | `bottom: 0`                                |
// | `pin-left`             |                       | `left: 0`                                 |                                            |
// | `pin-center-top`       |                       |                                           | `top: 50%; transform: translateY(-50%)`    |
// | `pin-center-right`     |                       | `right: 50%; transform: translateX(-50%)` |                                            |
// | `pin-center-bottom`    |                       |                                           | `bottom: 50%; transform: translateY(-50%)` |
// | `pin-center-left`      |                       | `left: 50%; transform: translateX(-50%)`  |                                            |
//
//
//
// Styleguide Utilities.Position

.pos-rel {
  position: relative;
}

.pos-abs {
  position: absolute;
}

.pin {

  &-top {
    top: 0;
  }

  &-right {
    right: 0;
  }

  &-bottom {
    bottom: 0;
  }

  &-left {
    left: 0;
  }

  &-center-top {
    top: 50%;
    transform: translateY(-50%);
  }

  &-center-right {
    right: 50%;
    transform: translateX(-50%);
  }

  &-center-bottom {
    bottom: 50%;
    transform: translateY(-50%);
  }

  &-center-left {
    left: 50%;
    transform: translateX(-50%);
  }
}

// rounded corners based on $spacers map
@each $unit, $rem in $spacers {
  .rounded-#{$unit} {
    border-radius: #{$rem};
  }
}


// Height and Width
//
// These classes give you `width: 100%` and `height: 100%`.
//
// | Height     | Width         |                     |                      |
// | ---------- | ------------- | ------------------- | -------------------- |
// | `h-100`    | `w-100`       |                     |                      |
//
// Styleguide Utilities.HeightWidth

.h-100 {
  height: 100%;
}

.w-100 {
  width: 100%;
}


// Overflow
//
// You can add or hide specific overflow on an element with the following classes.
//
// | overflow                | overflow-y               | overflow-x           |
// | ----------------------- | ------------------------ | -------------------- |
// | `overflow-visible`      | `overflow-y`             | `overflow-x`         |
// | `overflow-hidden`       | `overflow-y--scroll`     | `overflow-x--scroll` |
// |                         | `overflow-y--hidden`     | `overflow-x--hidden` |
//
// The classes with the `--scroll` modifier will use our custom scroll bar.
//
// Styleguide Utilities.Overflow

.overflow {

  &-visible {
    overflow: visible;
  }

  &-hidden {
    overflow: hidden;
  }

  &-y {
    overflow-y: visible;

    &--scroll {
      overflow-y: scroll;
      @extend %scrollbar;
    }

    &--hidden {
      overflow-y: hidden;
    }
  }

  &-x {
    overflow-x: visible;

    &--scroll {
      overflow-x: scroll;
      @extend %scrollbar;
    }

    &--hidden {
      overflow-x: hidden;
    }
  }
}


// Scale Hover
//
// The class `hover-scale` will scale the element, on hover, to 1.05 the original size.
//
//
// Markup:
// <section>
//   <div class="block-container">
//     <div class="block block-4">
//       <div class="rim-card hover-scale">
//         <h4 class="pb-2 mb-2">Hover over this</h4>
//         <div class="rim-card__content">
//           <p>Notice how it scales on hover</p>
//         </div>
//       </div>
//     </div>
//   </div>
// <section>
//
// Styleguide Utilities.ScaleHover
.hover-scale {
  transition: $transitions;

  &:hover {
    transform: scale(1.05);
  }
}


// Transition
//
// Using the `transition` class adds `transition: .2s;` to an element. You could use this to make specific hover effects by toggling a class.
// For example, if you wanted the border-color on a `rim-card` to change on a click, you could add the `transition` class, and toggle the class `border--color-{color}`.
//
// Styleguide Utilities.Transition

.transition {
  transition: $transitions;
}

.scrollbar {
  @extend %scrollbar;
}
