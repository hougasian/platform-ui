// Tabs
// 
// The content for a tabbed section needs to live inside the `.rim-tabs` class. The tabs should 
// be added to a `.rim-card` with the class `has-tabs` added. This class gives the card the proper
// margin-top necessary for the look of the tabs being outside the card.
// 
// The aria attributes are important to the funcationality of the tabs as well. The active tab styles
// come from `aria-selected="true"` being set on the tab. The corresponding tab content is displayed
// by the removal of the `hidden` attribute.
// 
// Be sure that the `href` value on the `rim-tab__acnchor` matches that of the corresponding
// `rim-tab-panel` id. This is key for links that contain the hash in the url.
// 
// The tabs themselves or the `.rim-tab` have a specific width of `16rem` as well as a specific
// height of `4rem`. The width can be changed using the [blocks layout method](/styleguide/section-layout.html#kssref-layout-blocks).
// 
// Markup: 
// <div class="rim-card has-tabs">
//   <div class="rim-tabs">
//     <ul class="rim-tab-list" role="tablist" aria-label="Sample Tabs">
//      <li class="rim-tab">
//        <a href="#contracts-active" class="rim-tab__anchor" role="tab" aria-selected="true" aria-controls="contracts-active" id="rim-tab-1" tabindex="0">
//          <i class="fas fa-folder-open" focusable="false" aria-hidden="hidden"></i><span class="rim-tab__title">Animal</span>
//        </a>
//      </li>
//      <li class="rim-tab">
//        <a href="#contracts-inactive" class="rim-tab__anchor" role="tab" aria-selected="false" aria-controls="contracts-inactive" id="rim-tab-2" tabindex="-1">
//          <i class="fas fa-folder" focusable="false" aria-hidden="hidden"></i><span class="rim-tab__title">Another Animal</span>
//        </a>
//      </li>
//      <li class="rim-tab">
//        <a href="#contracts-downlines" class="rim-tab__anchor" role="tab" aria-selected="false" aria-controls="contracts-downlines" id="rim-tab-3" tabindex="-1">
//          <i class="fad fa-users" focusable="false" aria-hidden="hidden"></i><span class="rim-tab__title">Third Animal</span>
//        </a>
//      </li>
//    </ul>
//     <div class="rim-tab-panel" id="contracts-active" role="tabpanel" tabindex="0" aria-labelledby="rim-tab-1">
//       <img src="https://placeimg.com/640/480/animals?t=1565635267224">
//     </div>
//     <div class="rim-tab-panel" id="contracts-inactive" role="tabpanel" tabindex="0" aria-labelledby="rim-tab-2" hidden>
//       <img src="https://placeimg.com/640/480/animals?t=1565635322782">
//     </div>
//     <div class="rim-tab-panel" id="contracts-downlines" role="tabpanel" tabindex="0" aria-labelledby="rim-tab-3" hidden>
//       <img src="https://placeimg.com/640/480/animals?t=1565635383449">
//     </div>
//   </div>
// </div>
// 
// 
// Example JS below.
// This javascript is specific to changing the hash in the url. If that is the desired funtionality, this code might be helpful.
// Regardles of whether or not we want to change the hash value in the url, we do want to change the value of the proper `aria`
// roles in order to show the correct content.
// ```js
// const tabs = document.querySelectorAll('[role="tab"]');
// const tabList = document.querySelector('[role="tablist"]');
// const tabPanel = document.querySelectorAll('[role="tabpanel"]');
// 
// if(tabs) {
//   // Add a click event handler to each tab
//   tabs.forEach(tab => {
//     tab.addEventListener("click", changeTabs);
//   });
// 
//   if (window.location.hash) {
//     tabs.forEach(tab => {
//       if (window.location.hash === tab.hash) {
//         tab.setAttribute("aria-selected", true);
//       }
//     });
//     tabPanel.forEach(panel => {
//       if (window.location.hash.replace('#', '') === panel.id) {
//         panel.removeAttribute("hidden");
//       }
//     });
//   } else {
//     tabList.children[0].firstElementChild.setAttribute("aria-selected", true);
//     tabPanel[0].removeAttribute("hidden");
//   }
// 
//   // Enable arrow navigation between tabs in the tab list
//   let tabFocus = 0;
// 
//   tabList.addEventListener("keydown", e => {
//     // Move right
//     if (e.keyCode === 39 || e.keyCode === 37) {
//       tabs[tabFocus].setAttribute("tabindex", -1);
//       if (e.keyCode === 39) {
//         tabFocus++;
//         // If we're at the end, go to the start
//         if (tabFocus >= tabs.length) {
//           tabFocus = 0;
//         }
//         // Move left
//       } else if (e.keyCode === 37) {
//         tabFocus--;
//         // If we're at the start, move to the end
//         if (tabFocus < 0) {
//           tabFocus = tabs.length - 1;
//         }
//       }
// 
//       tabs[tabFocus].setAttribute("tabindex", 0);
//       tabs[tabFocus].focus();
//     }
//   });
// 
//   function changeTabs(e) {
//     const target = this;
//     const parent = target.parentNode;
//     const grandparent = parent.parentNode;
// 
//     history.replaceState(null, '', e.currentTarget.hash);
//     e.preventDefault();
// 
//     // Remove all current selected tabs
//     grandparent
//       .querySelectorAll('[aria-selected="true"]')
//       .forEach(t => t.setAttribute("aria-selected", false));
// 
//     // Set this tab as selected
//     target.setAttribute("aria-selected", true);
// 
//     // Hide all tab panels
//     grandparent.parentNode
//       .querySelectorAll('[role="tabpanel"]')
//       .forEach(p => p.setAttribute("hidden", true));
// 
//     // Show the selected panel
//     grandparent.parentNode
//       .querySelector(`#${target.getAttribute("aria-controls")}`)
//       .removeAttribute("hidden");
//   }
// }
// ```
// 
// 
// Styleguide Components.Tabs

$tab-height:          4rem;
$tab-active-color:    map-get($brand-colors, 'navy' );

.rim-card.has-tabs {
  margin-top: $tab-height;
}

.rim-tab-list {
  display: flex;
  list-style-type: none;
  padding: 0;
  margin-bottom: $spacer; // makes up for .rim-card padding-top
  margin-left: calc(-#{$spacer} - 1px); // .rim-card padding + 1px border
  margin-top: calc(-#{$tab-height} - #{$spacer}); // .rim-tab height + .rim-card padding
  width: calc(100% + (1rem + 1px) * 2);
}

.rim-tab {
  height: $tab-height;
  margin-bottom: 0;
  position: relative;
  width: 16rem;

  @include breakpoint(tablet, max) {
    flex: 1 1 auto;
  }

  &__anchor {
    background-color: transparent;
    border: 1px solid transparent;
    color: map-get($greyscale, 'light' );
    cursor: pointer;
    font-size: 100%;
    height: 100%;
    padding: map-get($spacers, 2 ) $spacer;
    position: relative;
    transition: $transitions;
    width: 100%;
    @extend %flex-center;

    @media (pointer: fine) {
      &:hover {
        background-color: map-get($greyscale, 'white' );
        border-color: lighten(map-get($greyscale, 'light'), $hue-threshold * 2);
        border-bottom-color: map-get($greyscale, 'white' );
        color: $tab-active-color;
        font-weight: 600;
      }
    }

    &:focus {
      outline: none;
    }

    &[aria-selected="true"] {
      background-color: map-get($greyscale, 'white' );
      border: 1px solid lighten(map-get($greyscale, 'light'), $hue-threshold * 2);
      border-bottom-color: map-get($greyscale, 'white' );
      color: $tab-active-color;
      font-weight: 600;
      pointer-events: none;

      &::before {
        background-color: $tab-active-color;
      }

      i {
        font-size: 100%;
      }
    }

    &::before {
      background-color: transparent;
      content: '';
      height: .3rem;
      left: -1px;
      position: absolute;
      right: -1px;
      top: 0;
      transition: $transitions;
      width: auto;
      border: none;
      border-radius: 0;
    }
  }

  i {
    @include breakpoint(tablet, max) {
      font-size: map-get($font-percentage, 'lg' );
    }
  }

  &__title {
    margin-left: map-get($spacers, 2 );

    @include breakpoint(tablet, max) {
      display: none;

      [aria-selected="true"] & {
        display: block;
      }
    }    
  }
}

.rim-tab-panel {
  
  &:focus {
    outline: none;
  }
}