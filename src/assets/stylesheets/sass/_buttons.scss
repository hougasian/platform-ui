// Button
//
// Each button has a default button style. Color can be added to any button using a combination of background and text utilities.
//
// Add icons to buttons using [Font Awesome](https://fontawesome.com/icons) icons: `<i class="fas fa-plus"></i>`
//
// Styleguide Components.Button

// Default
//
// The default platform button. Usually paired visually with an icon. Can be the default size or large.
//
// - .button
// - .button .button--lg
//
// Markup:
// <button class="button">Basic Button</button>
// <button class="button">Add <i class="fas fa-plus"></i></button>
// <button class="button button--lg">Add <i class="fas fa-plus"></i></button>
//
// Styleguide Components.Button.Default

// Secondary
//
// The secondary platform button. Always a round button paired witha Font Awesome icon. Can be the default size or large.
//
// - .button
// - .button .button--secondary
// - .button .button--secondary .button--lg
//
// Markup:
// <button class="button button--secondary"><i class="fas fa-download"></i></button>
//
// Styleguide Components.Button.Secondary

// Secondary - Text
//
// If you want to use the secondary button for the look and hover effect, but you need to include text, you can.
// Include the class `has-text` on the secondary button. So the classes tould be, `button button--secondary has-text`.
// What this does is add `width: auto` and a little padding for the text.
//
// If you want to display text only on hover, add a data attribute named `data-button-text`, this will insert the value of that attribute on hover.
//
// - .button
// - .button .button--secondary
// - .button .button--secondary .has-text
//
// Markup:
// <div class="button-group">
//   <button class="button button--secondary has-text">Open <i class="fas fa-download"></i></button>
//   <button class="button button--secondary" data-button-text="Download"><i class="fas fa-download"></i></button>
//   <button class="button button--secondary loading" data-button-text="Download"><i class="fas fa-download"></i></button>
// </div>
//
// Weight: 4
//
// Styleguide Components.Button.Secondary

// Post
//
// Used exclsively in Post, or blog, content imported into the platform. e.g., CRM dashboard.
//
// - .button .button--post
// - .button .button--post .button--lg
//
// Markup:
// <button class="button button--post">Post Button</button>
// <button class="button button--post button--lg">Large Post Button</button>
//
// Styleguide Components.Button.Post

// Group
//
// Evenly space any group of buttons.
//
// - .button--group
//
// Markup:
// <div class="button-group">
//   <a class="button button--secondary"><i class="fas fa-download"></i></a>
//   <a class="button button--secondary"><i class="fas fa-chart-pie"></i></a>
//   <a class="button button--secondary"><i class="fas fa-chart-line"></i></a>
// </div>
//
// Styleguide Components.Button.Group

// Loading
//
// Buttons with a loading icon. Example for form submissions.
//
//
// Markup:
// <div class="flexcol">
//   <button class="button loading" aria-label="Loading...">
//     Submit
//     <span class="sr-only">Loading...</span>
//   </button>
//   <button class="button button--lg loading" aria-label="Loading...">
//     Submit
//     <span class="sr-only">Loading...</span>
//   </button>
//   <button class="button button--secondary loading" aria-label="Download" aria-label="Loading...">
//     <i class="fas fa-download" aria-hidden="hidden"></i>
//     <span class="sr-only">Loading...</span>
//   </button>
//   <button class="button button--post loading" aria-label="Loading...">
//     Submit
//     <span class="sr-only">Loading...</span>
//   </button>
// </div>
//
// Notice: For styleguide purposes all of the code is rendered here. The things that should be
// toggled are the `aria-label="Loading"` and the text in the button. So for example, on
// submit, you would add `<span class="sr-only">Loading...</span>` the class
// `sr-only` is key to prevent the button from changin size.
//
// Styleguide Components.Button.Loading

// Accessibility
//
// For our links that should look like buttons, and contain an icon, we need to add specific
// `aria-roles` for accessibility.
// These are links that look like buttons but do not have the same html.
//
//
// Markup:
// <a class="button button--secondary" role="button" aria-label="Download">
//  <i class="fas fa-download" aria-hidden="hidden"></i>
// </a>
//
// Styleguide Components.Button.Accessibility

// Active
//
// By adding the class `active` to a button, the button's hover effect is mimicked.
//
// Markup:
// <button class="button">Add <i class="fas fa-plus" aria-hidden="hidden"></i></button>
// <button class="button button--lg active">Add <i class="fas fa-plus" aria-hidden="hidden"></i></button>
// <div class="button-group mt-4">
//   <a class="button button--secondary" role="button" aria-label="Download">
//     <i class="fas fa-download" aria-hidden="hidden"></i>
//   </a>
//   <a class="button button--secondary active" role="button" aria-label="Pie Chart">
//     <i class="fas fa-chart-pie" aria-hidden="hidden"></i>
//   </a>
// </div>
//
// Styleguide Components.Button.Active

@use 'config/_index.scss' as conf;

.button {
  align-items: center;
  background-color: conf.$primary-background;
  border: 1px solid lighten(map-get($greyscale, 'light'), $hue-threshold * 2);
  border-radius: conf.$border-radius;
  color: conf.$primary-color;
  cursor: pointer;
  display: flex;
  font-family: map-get($fonts, 'base');
  font-size: map-get($fonts, 'size');
  padding: conf.$primary-padding;
  transition: conf.$duration;
  white-space: nowrap;

  &.active,
  &:hover {
    background-color: conf.$secondary-background;
    border-color: inherit;
    color: conf.$secondary-color;
  }

  &:disabled {
    background-color: lighten(map-get($greyscale, 'light' ), 10);
    cursor: not-allowed;
    opacity: .7;
    pointer-events: none;
  }

  &.loading {
    align-items: center;
    overflow: hidden;
    pointer-events: none;
    position: relative;

    &:before {
      background-color: conf.$secondary-background;
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }

    &:not([data-button-text]) {
      &:after {
        @extend %rim-loader;
        @include square($spacer);
        box-sizing: border-box;
        content: '';
        display: block;
        border-color: conf.$primary-background;
        border-top-color: lighten(map-get($greyscale, 'base' ), 20%);
        left: 50%;
        margin-left: -.5rem;
        margin-top: -.5rem;
        position: absolute;
        top: 50%;
      }
    }
  }

  i {
    margin: 0 map-get($spacers, 1);
  }

  [aria-hidden="hidden"] {
    pointer-events: none;
  }

  &:not(.button--secondary):not(.mobile-menu-action):not(.close-action) {

    i {
      @include breakpoint(lg-tablet, max) {
        display: none;
      }
    }
  }

  &--secondary {
    background-color: conf.$secondary-background;
    border: 1px solid conf.$secondary-background;
    color: conf.$secondary-color;
    border-radius: conf.$border-radius * 100;
    padding: 0;
    width: 2rem;
    height: 2rem;
    @extend %flex-center;

    &.active,
    &:hover {
      background-color: darken(conf.$secondary-background, $hue-threshold);
      box-shadow: 0 0 0 .3rem lighten(conf.$secondary-background, $hue-threshold);
    }

    &[data-button-text] {
      transition: conf.$duration;

      &:after {
        display: none;
        width: 0;
        content: attr(data-button-text);
      }

      &:hover {
        width: auto;
        padding: 0 map-get($spacers, 1 );

        &:after {
          width: auto;
          display: inline-block;
          padding-right: map-get($spacers, 2 );
        }

      }

    }

    &.loading {

      &:before {
        background-color: darken(conf.$secondary-background, $hue-threshold);
        box-shadow: 0 0 0 .3rem lighten(conf.$secondary-background, $hue-threshold);
      }

      &[data-button-text] {
        background-color: darken(conf.$secondary-background, $hue-threshold);
        border-color: inherit;
        box-shadow: 0 0 0 .3rem lighten(conf.$secondary-background, $hue-threshold);
        padding: 0 map-get($spacers, 1 );
        width: auto;

        &:before {
          @extend %rim-loader;
          @include square($spacer);
          background-color: unset;
          box-sizing: border-box;
          box-shadow: none;
          content: '';
          display: block;
          border-color: conf.$primary-background;
          border-top-color: lighten(map-get($greyscale, 'base' ), 20%);
          left: 0;
          margin: 0 map-get($spacers, 1 );
          position: relative;
          top: 0;
        }

        &:after {
          content: attr(data-button-text);
          width: auto;
          display: inline-block;
          padding-right: map-get($spacers, 2 );
        }

        i {
          display: none;
        }
      }
    }

    &.has-text {
      padding: 0 map-get($spacers, 2 );
      width: auto;

      @include breakpoint(lg-tablet, max) {
        font-size: 0;
        width: 2rem;

        i {
          font-size: initial;
        }
      }
    }
  }

  &--post {
    background-color: conf.$secondary-background;
    border: 1px solid conf.$secondary-background;
    color: conf.$secondary-color;
    transition: conf.$transitions;

    &.active,
    &:hover {
      background-color: darken(conf.$secondary-background, 10%);
      background-image: linear-gradient(45deg, conf.$secondary-background, darken(conf.$secondary-background, $hue-threshold * 2));
    }

    &.loading {

      &:before {
        background-color: darken(conf.$secondary-background, 10%);
        background-image: linear-gradient(45deg, conf.$secondary-background, darken(conf.$secondary-background, $hue-threshold * 2));
      }
    }
  }

  &--lg {
    font-size: map-get($font-percentage, 'lg');
    padding: conf.$large-padding;

    &.loading {

      &:after {
        @include square($spacer * 1.5);
        margin-left: -.75rem;
        margin-top: -.75rem;
      }
    }
  }

  .fa-sliders-h {
    transform: rotate(90deg);
  }
}

.button-group {
  display: flex;
  align-items: center;

  .button {
    margin: conf.$group-margin;

    &:first-child {
      margin-left: 0;
    }

    &:last-child {
      margin-right: 0;
    }
  }
}
