// Mixins
// 
// A sample of mixins we use throughout platform-ui.
// 
// Styleguide SASS.Mixins

// Media Queries
//
// With this mixin you can either use straigh px values or the preset breakpoints we set in the breakpoints map.
// Each time you use this mixin you will need the size value and a direction parameter (min, or max).
//
// To make a min-width media query
// ```css
// .test {
//   @include breakpoint(mobile, min) {
//     display: none;
//   }
// }
// ```
//
// Output
// ```css
// @media only screen and (min-width: 768px) {
//   .test {
//     display: none;
//   }
// }
// ```
//
//
//
// For a max-width media query
// ```css
// .test {
//   @include breakpoint(laptop, max) {
//     display: none;
//   }
// }
// ```
//
// Output - Even though the `laptop` variable is set to 1240px, the max-width mixin substracts 1px.
// ```css
// @media only screen and (max-width: 1239px) {
//   .test {
//     display: none;
//   }
// }
// ```
//
//
//
// If you need a min-width and max-width media query, you need to nest a max-width inside the min-width media query.
// ```css
// .test {
//   @include breakpoint(mobile, min) {
//     @include breakpoint(laptop, max) {
//       display: none;
//     }
//   }
// }
// ```
//
// Output
// ```css
// @media only screen and (min-width: 768px) and (max-width: 1239px) {
//   .test {
//     display: none;
//   }
// }
// ```
//
// You can also use this mixin with standard px values.
// ```css
// .test {
//   @include breakpoint(800px, min) {
//     display: none;
//   }
// }
// ```
// Output
// ```css
// @media only screen and (min-width: 800px) {
//   .test {
//     display: none;
//   }
// }
// ```
//
// And a max-width media query. Note with a specific px value, the mixin will not subtract 1px from the value you use.
// ```css
// .test {
//   @include breakpoint(1441px, max) {
//     display: none;
//   }
// }
// ```
// Output
// ```css
// @media only screen and (max-width: 1441px) {
//   .test {
//     display: none;
//   }
// }
// ```
//
// You can make special media queries too. For example target a device orientation.
//```css
//.test {
//  @include breakpoint(landscape, orientation) {
//   font-weight: bold;
//  }
//}
//```
//
// Output
//```css
// @media only screen and (orientation: landscape) {
//   .test {
//     font-weight: bold;
//   }
// }
//```
//
//
// Styleguide SASS.Mixins.MediaQuery


// Square
// 
// If you want an element that has equal height and width, you can build one using the `@include square` mixin.
// 
// ```css
// .test {
//   @include square(2rem);
// }
// ```
// 
// This will output:
// ```css
// .test {
//   height: 2rem;
//   width: 2rem;
// }
// ```
// 
// 
// You can also use a minMax parameter that will use min or max values on height and width.
// 
// ```css
// .test {
//   @include square(3rem, min);
// }
// ```
// 
// This outputs:
// ```css
// .test {
//   min-height: 3rem;
//   min-width: 3rem;
// }
// ```
// 
// If you want `max-height` and `max-width` simply use `max` in the mixin.
// 
// ```css
// .test {
//   @include square(4rem, max);
// }
// ```
// 
// Outputs:
// ```css
// .test {
//   max-height: 4rem;
//   max-width: 4rem;
// }
// ```
// 
// Styleguide SASS.Mixins.Square

@mixin breakpoint($breakpoint, $direction: null) {
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @if $direction == max {
      @media only screen and (max-width: ($breakpoint-value - 1)) {
        @content;
      }
    } @else if $direction == min {
      // Write the media query.
      @media only screen and (min-width: $breakpoint-value) {
        @content;
      }
    } @else {
      @media only screen and ($direction: $breakpoint-value) {
        @content;
      }
    }

  // If the breakpoint doesn't exist in the map.
  } @else {
    @if $direction == max {
      @media only screen and (max-width: $breakpoint) {
        @content;
      }
    } @else if $direction == min {
      @media only screen and (min-width: $breakpoint) {
        @content;
      }
    } @else {
      @media only screen and ($direction: $breakpoint) {
        @content;
      }
    }
  }
}

// Equal Height and Width
// Set 'min' or 'max' unless straight height, width
@mixin square($size, $minMax:null) {
  @if $minMax {
    #{$minMax}-height: $size;
    #{$minMax}-width: $size;
  } @else {
    width: $size;
    height: $size;
  }
}


// Messages Variant
@mixin message-variant($background, $color) {
  background-color: $background;
  border-color: darken($background, 20%);
  color: $color;

  * {
    color: $color;
  }

  a {
    color: darken($color, 10%);
    font-weight: 700;
  }
}


// Function the gets the next value in the map.
@function nextKey($current-value, $mapped-list:$breakpoints) {
  // get current key from list
  $the-list: map-keys($mapped-list);

  //find index of current value and add 1
  $the-index: ( index( $the-list, $current-value) ) + 1;

  // get value from list with new index
  $new-value : nth($the-list, $the-index);

  @return $new-value;
}