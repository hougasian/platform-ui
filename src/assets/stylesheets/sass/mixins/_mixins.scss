@use "config";
@use "sass:color";
@use "sass:math";
@use "sass:map";

// Media Queries
//
// ## Breakpoints
// With this mixin you can either use straigh px values or the preset breakpoints we set in the breakpoints map.
// Each time you use this mixin you will need the size value and a direction parameter (min, or max).
//
// You could also create custom media queries by changing the parameters. For example, you could make a max-height specific media query
// by using the following code `@include mixin.breakpoint(600px, max-height){ code }`.
// 
// 
// 
// ## Square
//
// If you want an element that has equal height and width, you can build one using the `@include square()` mixin.
// All you need is to enter a value being the height and width of the square you want to build.
// So `@include mixins.square(2rem);` for example.
//
// Styleguide _getting-started.SASS.Mixins

@mixin breakpoint($breakpoint, $direction: null) {
  @if map.has-key(config.$breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map.get(config.$breakpoints, $breakpoint);

    @if $direction == max {
      @media only screen and (max-width: ($breakpoint-value - 1)) {
        @content;
      }
    } @else if $direction == min {
      // Write the media query.
      @media only screen and (min-width: $breakpoint-value) {
        @content;
      }
    } @else {
      @media only screen and ($direction: $breakpoint-value) {
        @content;
      }
    }

  // If the breakpoint doesn't exist in the map.
  } @else {
    @if $direction == max {
      @media only screen and (max-width: $breakpoint) {
        @content;
      }
    } @else if $direction == min {
      @media only screen and (min-width: $breakpoint) {
        @content;
      }
    } @else {
      @media only screen and ($direction: $breakpoint) {
        @content;
      }
    }
  }
}

// Equal Height and Width
// Set 'min' or 'max' unless straight height, width
@mixin square($size, $minMax:null) {
  @if $minMax {
    #{$minMax}-height: $size;
    #{$minMax}-width: $size;
  } @else {
    width: $size;
    height: $size;
  }
}


// Messages Variant
@mixin message-variant($background, $color) {
  background-color: $background;
  border-color: color.adjust($background, $lightness: math.percentage(-(config.$hue-threshold * 2)));
  color: $color;

  * {
    color: $color;
  }

  a {
    color: color.scale($color, $lightness: math.percentage(-(config.$hue-threshold)));
    font-weight: 700;
  }
}


// Function the gets the next value in the map.
@function nextKey($current-value, $mapped-list:config.$breakpoints) {
  // get current key from list
  $the-list: map.keys($mapped-list);

  //find index of current value and add 1
  $the-index: ( index( $the-list, $current-value) ) + 1;

  // get value from list with new index
  $new-value : nth($the-list, $the-index);

  @return $new-value;
}
