@use "config";
@use "variables";
@use "sass:color";
@use "sass:math";
@use "sass:map";

// Pez
//
// Pez represent square and rectangular rounded labels throughout the platform.
// A Pez can support color by adding a text or background modifier as do Pills.
//
// Pez were created to handle a specific need in our system for georaphic states. States and Products are used as buttons, so they are here as well.
// 
// For accessibility purposes, add `aria-label="{state name}"`.
//
// Pez have 3 states, default, disabled, and pressed
//
// Markup:
// <div class="pez" aria-label="Alaska">
//   AK
// </div>
// <div class="pez disabled" aria-label="Washington DC">
//   DC
// </div>
// <div class="pez pressed" aria-label="Georgia">
//   GA
// </div>
//
// Styleguide Components.Pez

// Corner label
//
// Pez can also have corner labels. These were designed to be used with the platform icon `pi-check`.
//
// Markup:
// <button class="pez" aria-label="Alaska">
//   AK
//   <div class="pez__check-wrapper">
//     <i class="pi-check" aria-hidden="true"></i>
//   </div>
// </button>
// <button class="pez disabled" aria-label="Washington DC">
//   DC
//   <div class="pez__check-wrapper">
//     <i class="pi-check" aria-hidden="true"></i>
//   </div>
// </button>
// <button class="pez pressed" aria-label="Georgia">
//   GA
//   <div class="pez__check-wrapper">
//     <i class="pi-check" aria-hidden="true"></i>
//   </div>
// </button>
//
// Styleguide Components.Pez.CornerLabel

// Products
//
// Pez can also be a product label. The 2 states are default and disabled.
//
// Markup:
// <button class="pez pez--has-product">
//   Medicare Supplement
// </button>
// <button class="pez pez--has-product disabled">
//   Medicare Advantage
// </button>
//
// Styleguide Components.Pez.Products


.pez {

  background-color: map.get(variables.$greyscale, 'light-mid');
  border: 1px solid color.adjust(map.get(variables.$greyscale, 'light'), $lightness: math.percentage(config.$hue-threshold * 1.5));
  border-radius: map.get(variables.$spacers, 1);
  color: color.adjust(map.get(variables.$greyscale, 'light'), $lightness: math.percentage(-(config.$hue-threshold * 2.5)));
  cursor: pointer;
  display: inline-flex;
  font-size: map.get(variables.$font-percentage,'sm');
  font-weight: bold;
  justify-content: center;
  margin: map.get(variables.$spacers, 1) / 2;
  min-width: map.get(variables.$spacers, 4);
  overflow: hidden;
  padding: map.get(variables.$spacers, 1);
  position: relative;
  transition: config.$transitions;

  &--has-product {
    background-color: rgba(map.get(config.$secondary-colors, 'yellow'), config.$opacity /  1.5);
    border: 1px solid color.adjust(map.get(config.$brand-colors, 'brown'), $lightness: math.percentage(config.$hue-threshold * 1.5));
    border-radius: map.get(variables.$spacers, 1);
    color: map.get(config.$brand-colors, 'brown');
    padding: map.get(variables.$spacers, 2) map.get(variables.$spacers, 3);
  }

  // --check-wrapper is meant to be used with a checkmark icon
  &__check-wrapper {

    $small-spacer: map.get(variables.$spacers, 2)  / 2;

    color: white;
    bottom: -1px;
    right: -1px;
    height: variables.$spacer;
    position: absolute;
    width: variables.$spacer;
    
    // triangle for check background
    &:after {
      content: "";
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 0 0 1rem 1rem;
      border-color: transparent transparent map.get(variables.$error-colors, 'positive') transparent;
      position: absolute;
      bottom: 0;
      right: 0;
      z-index: 1;
    }

    .pi-check {
      display: block;
      font-size: map.get(variables.$font-percentage, 'xxs');
      position: absolute;
      bottom: 0; 
      right: 1px;
      z-index: 2;
    }
  }

  &.disabled {
    cursor: none;
    font-weight: normal;
    opacity: config.$opacity / 2;
  }

  &.pressed {
    background-color: color.adjust(map.get(config.$brand-colors, 'med-blue'), $lightness: math.percentage(config.$hue-threshold * 2));
    border-color: map.get(config.$brand-colors, 'med-blue');
    color: map.get(variables.$greyscale, 'white');
    font-weight: bold;
  }

}
