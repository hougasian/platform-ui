@use "config";
@use "variables";
@use "sass:map";
@use "sass:meta";

// Background Colors
//
// These classes are to be used to set, or change a background-color on a specific element. Similar to our `text-{color}` classes.
// You can view our list of colors [greyscale](/section-color.html#kssref-color-greyscale), [brand colors](/section-color.html#kssref-color-brandcolors), and [secondary colors](/section-color.html#kssref-color-secondarycolors) maps.
//
// | Greyscale               |                          |                           |                            |
// | ----------------------- | ------------------------ | ------------------------- | -------------------------- |
// | `background-white`      | `background-lighter`     | `background-light-mid`    | `background-light`         |
// | `background-base`       | `background-dark`        | `background-black`        |                            |
//
// | Brand colors            |                          |                           |                            |
// | ----------------------- | ------------------------ | ------------------------- | -------------------------- |
// | `background-navy`       | `background-skyblue`     | `background-med-blue`     | `background-beige`         |
// | `background-peach`      | `background-salmon`      | `background-brown`        | `background-orange`        |
//
// | Secondary colors        |                          |                           |                            |
// | ----------------------- | ------------------------ | ------------------------- | -------------------------- |
// | `background-red`        | `background-olive`       | `background-purple`       | `background-yellow`        |
// | `background-pink`       | `background-cyan`        | `background-violet`       | `background-blue`          |
// | `background-green`      | `background-teal`        | `background-gold`         |                            |
//
// Styleguide Utilities.Color.Background

$all-colors: () !default;
$platform-colors: () !default;

@if meta.type-of(config.$config-colors) == 'map' {
  $all-colors: map.merge(config.$config-colors, variables.$greyscale);
} @else {
  $all-colors: map.merge(variables.$greyscale, $all-colors);
  @warn "$config-colors is not set or empty";
}

@if meta.type-of($all-colors) == 'map' {
  @each $name, $color in $all-colors {
    // text color
    .text-#{$name} {
      &.pill {
        border-color: $color !important;
      }
      color: $color !important;
      transition: .2s;
      &--hover {
        transition: config.$transitions;

        &.text-underline--hover {
          &:after {
            background-color: $color !important;
          }
        }

        &:hover {
          color: $color !important;
        }
      }
    }
    // background color
    .background-#{$name} {
      background-color: $color !important;

      &.button {

        &.loading {

          &:before {
            background-color: $color !important;
          }
        }
      }
    }
    // create native css variables
    :root {
      --pui-#{$name}: #{$color};
    }
  }
}

$platform-colors: map.merge(config.$platform-colors, $platform-colors);

@if meta.type-of($platform-colors) == 'map' {
  @each $name, $color in $platform-colors {
    // text color
    .text-#{$name} {
      border-color: $color !important;
      color: $color !important;
      transition: .2s;
    }
    // background color
    .background-#{$name} {
      background-color: $color !important;

      &.button {

        &.loading {

          &:before {
            background-color: $color !important;
          }
        }
      }
    }
    // create native css variables
    :root {
      --pui-#{$name}: $color;
    }
  }
}
