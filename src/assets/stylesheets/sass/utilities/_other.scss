@use "config";
@use "variables";
@use "sass:map";
@use "mixins";

// Rotate
//
// Utility classes to rotate an element.
//
// Markup:
// <div class="button-group">
//   <button class="rotate-45 button">45 degrees</button>
//   <button class="rotate-90 button">180 degrees</button>
//   <button class="rotate-180 button">180 degrees</button>
// </div>
//
// Styleguide Utilities.Rotate

.rotate {
  &-45 {
    @extend %rotate-45;
  }
  &-90 {
    @extend %rotate-90;
  }
  &-180 {
    @extend %rotate-180;
  }
}


// Colors
//
// Find some utility classes that you can use to use along our existing color classes.
//
// Styleguide Utilities.Color


// Transparent
//
// If you want to remove the background color and border color on an element, add the class `transparent`.
//
// Markup:
// <div class="block-container card background--lighter">
//   <div class="block-6">
//     <button class="button">Button</button>
//   </div>
//   <div class="block-6">
//     <button class="button transparent">Transparent Button</button>
//   </div>
// </div>
//
// Styleguide Utilities.Color.Transparent

.transparent {
  background: transparent !important;
  border-color: transparent !important;
}

// Inverted
//
// The `inverted` class changes the color of an element to white. It has a transition, so after the class is added, the color
// will transition to white.
//
// Styleguide Utilities.Color.Inverted

.inverted {
  @extend %inverted;
}

.animated.fastest {
  animation-duration: config.$transitions;
}



// Screen reader only
//
// This class is to hide text that is important for screen readers and accessibility.
// `sr-only`
//
// Styleguide Utilities.ScreenReader

.sr-only {
  // https://a11yproject.com/posts/how-to-hide-content/
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  overflow: hidden;
  position: absolute !important;
}


// Loader
//
// The standard loading wheel that is used throughout platform-ui. This class is extended on the loading button.
//
// Markup:
// <div class="block-container blocks-px-3">
//   <div class="block block-6 flex--center-content" style="height: 3rem">
//     <div class="loader loader--sm"></div>
//     <div class="loader mx-4"></div>
//     <div class="loader loader--lg"></div>
//   </div>
//   <div class="block block-6 background--navy flex--center-content" style="height: 3rem">
//     <div class="loader loader--sm inverted"></div>
//     <div class="loader inverted mx-4"></div>
//     <div class="loader loader--lg inverted"></div>
//   </div>
// </div>
//
// Styleguide Utilities.Loader
@keyframes rotation {
  to {
    transform: rotate(360deg);
  }
}
%loader,
.pui-loader,
.loader {
  animation: rotation 1s infinite linear;
  border: 2px solid map.get(config.$loader-colors, 'primary');
  border-radius: map.get(variables.$radius, 'round');
  border-top-color: map.get(config.$loader-colors, 'primary-top');
  margin: 0;
  @include mixins.square(1.4rem);
  @include mixins.square(1.4rem, 'min');
}

.pui-loader,
.loader {

  &.inverted {
    border-color: map.get(config.$loader-colors, 'inverted');
    border-top-color: map.get(config.$loader-colors, 'inverted-top');
  }

  &--sm {
    @include mixins.square(.9rem);
    @include mixins.square(.9rem, 'min');
  }

  &--lg {
    @include mixins.square(2rem);
    @include mixins.square(2rem, 'min');
  }

}


// Cursors
//
// If you need to specify the type of cursor to use, you can apply the following any of the following cursor utilities:
//
// | Cursor Type            | Class                 | 
// | ---------------------- | --------------------- | 
// | Default                | `.cursor--default`    | 
// | Pointer                | `.cursor--pointer`    | 
// | Not-allowed            | `.cursor--not-allowed`| 
// | Help                   | `.cursor--help`       |
//
//
// #### Example:
// <div class="card">
//   <h3>Hover over the text below</h3>
//   <p class="cursor--pointer">This is a standard p and doesn't have a pointer, unless you hover.</p>
// </div>
//
// Styleguide Utilities.Cursor

$cursors: (
  pointer,
  default,
  not-allowed,
  help
);

.pointer{
  cursor: pointer!important;
}

@each $cursor in $cursors{
  .cursor{
    &--#{$cursor} {
      cursor: $cursor!important;
    }
  }
}



// Position
//
// If you need to postion something absolute you can use the following classes.
//
// Remember that when positioning an element absolute, the element will position
// according to the closest parent element that has `position: relative`. For this
// you can use the class `pos-rel` on the parent element you want to position the
// absolute element to.
//
// | Class                  | Position              | X-Axis                                    | Y-Axis                                      |
// | ---------------------- | --------------------- | ----------------------------------------- | ------------------------------------------  |
// | `pos-rel`              | `position: relative`  |                                           |                                             |
// | `pos-abs`              | `position: absolute`  |                                           |                                             |
// | `pos-fix`              | `position: fixed`     |                                           |                                             |
// | `pos-stick`            | `position: sticky`    |                                           |                                             |
// | `pin-top`              |                       |                                           | `top: 0`                                    |
// | `pin-right`            |                       | `right: 0`                                |                                             |
// | `pin-bottom`           |                       |                                           | `bottom: 0`                                 |
// | `pin-left`             |                       | `left: 0`                                 |                                             |
// | `pin-center`           |                       | `left: 50%`                               | `top: 50%; transform: translate(-50%,-50%)` |
// | `pin-center-top`       |                       |                                           | `top: 50%; transform: translateY(-50%)`     |
// | `pin-center-right`     |                       | `right: 50%; transform: translateX(-50%)` |                                             |
// | `pin-center-bottom`    |                       |                                           | `bottom: 50%; transform: translateY(-50%)`  |
// | `pin-center-left`      |                       | `left: 50%; transform: translateX(-50%)`  |                                             |
//
//
//
// Styleguide Utilities.Position

@each $key, $val in variables.$positions {
  .pos-#{$key} {
    position: #{$val}!important;
  }
}

@each $pos, $letter in variables.$xy-border {
  .pin-#{$pos} {
    #{$pos}: 0 !important;
  }

  .pin-center {
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%);
    
    &-#{$pos} {
      #{$pos}: 50% !important;
      @if $pos == top or $pos == bottom {
        transform: translateY(-50%);
      } @else {
        transform: translateX(-50%);
      }
    }
  } 
}

// Rounded
// 
// Add rounded edges to all corners of an element, or individual corners
// 
// | Classes             |                                          |
// | ------------------- | ---------------------------------------- |
// | `rounded--{0-7}`    | Adds rounded edges to all corners        |
// | `rounded-tl--{0-7}` | Adds rounded edge to top left corner     |
// | `rounded-tr--{0-7}` | Adds rounded edge to top right corner    |
// | `rounded-bl--{0-7}` | Adds rounded edge to bottom left corner  |
// | `rounded-br--{0-7}` | Adds rounded edge to bottom right corner |
//
// #### Example:
// <div class="rounded--3 card mb-4">
//   Card Content
// </div>
// 
// <div class="rounded-tl--3 rounded-br--3 card mb-4">
//   Card Content
// </div>
//
//
//
// Styleguide Utilities.Rounded

$corners:(
  'tl': 'top-left',
  'tr': 'top-right',
  'bl': 'bottom-left',
  'br': 'bottom-right'
);

// rounded corners based on $spacers map
@each $unit, $rem in variables.$spacers {
  .rounded-#{$unit},
  .rounded--#{$unit} {
    border-radius: #{$rem}!important;
  }

  @each $corner, $value in $corners {
    .rounded-#{$corner}--#{$unit}{
      border-#{$value}-radius: #{$rem}!important;
    }
  }
}


// Height and Width
//
// These classes give you a width and height percentage equal to the number in the class.
//
// | Height     |              | Width      |              |
// | ---------- | ------------ | -----------| ------------ |
// | `h-100`    | height: 100% | `w-100`    | width: 100%  |
// | `h-75`     | height: 75%  | `w-75`     | width: 75%   |
// | `h-50`     | height: 50%  | `w-50`     | width: 50%   |
// | `h-25`     | height: 25%  | `w-25`     | width: 25%   |
// | `h-auto`   | height: auto  | `w-auto`     | width: auto   |
// 
// <p class="my-4"></p>
//
// These classes give you a width and height percentage, relative to the viewport, equal to the number in the class.
//
// | Height     |              | Width      |              |
// | ---------- | ------------ | -----------| ------------ |
// | `vh-100`    | height: 100vh | `vw-100`    | width: 100vw  |
// | `vh-75`     | height: 75vh  | `vw-75`     | width: 75vw   |
// | `vh-50`     | height: 50vh  | `vw-50`     | width: 50vw   |
// | `vh-25`     | height: 25vh  | `vw-25`     | width: 25vw   |
//
// Styleguide Utilities.HeightWidth

@each $size, $letter in (height: h, width: w) {
  @each $number, $value in variables.$quarter-values {
    .#{$letter}-#{$number} {
      #{$size}: #{$value};
    }
  }
  .#{$letter} {
    &-auto {
      #{$size}: auto !important;
    }
  }
}

@each $size, $letter in (height: vh, width: vw) {
  @each $number, $value in variables.$quarter-values {
    .#{$letter}-#{$number} {
      @if $letter == vh {
        #{$size}: #{$number}vh;
      } @else {
        #{$size}: #{$number}vw;
      }
    }
  }
}




// Overflow
//
// You can add or hide specific overflow on an element with the following classes.
//
// | overflow                | overflow-y               | overflow-x           |
// | ----------------------- | ------------------------ | -------------------- |
// | `overflow-visible`      | `overflow-y`             | `overflow-x`         |
// | `overflow-hidden`       | `overflow-y--scroll`     | `overflow-x--scroll` |
// |                         | `overflow-y--hidden`     | `overflow-x--hidden` |
// | `overflow-auto`         | `overflow-y--auto`       | `overflow-x--auto`   |
//
// Styleguide Utilities.Overflow

@each $key, $value in variables.$overflow {
 .overflow-#{$key} {
    overflow: #{$value}!important;
  }

  @each $axis, $letter in (y: y, x: x) {
    .overflow-#{$letter}--#{$key} {
      overflow-#{$letter}: #{$value}!important;
    }
  }
}


// Scale Hover
//
// The class `hover-scale` will scale the element, on hover, to 1.05 the original size.
//
//
// Markup:
// <section>
//   <div class="block-container">
//     <div class="block block-4">
//       <div class="card hover-scale">
//         <h4 class="pb-2 mb-2">Hover over this</h4>
//         <div class="card__content">
//           <p>Notice how it scales on hover</p>
//         </div>
//       </div>
//     </div>
//   </div>
// <section>
//
// Styleguide Utilities.ScaleHover
.hover-scale {
  transition: config.$transitions;

  &:hover {
    transform: scale(1.05);
  }
}


// Shadow Hover
//
// The class `hover-shadow` adds a box-shadow on hover of the element you add it to. You can use this along with the `hover-scale` class as well. See the
// example below.
//
//
// Markup:
// <section>
//   <div class="block-container blocks px-2">
//     <div class="block block-4">
//       <div class="card hover-shadow">
//         <h4 class="pb-2 mb-2">Hover over this</h4>
//         <div class="card__content">
//           <p>Notice how it shadows on hover</p>
//         </div>
//       </div>
//     </div>
//     <div class="block block-4">
//       <div class="card hover-shadow hover-scale">
//         <h4 class="pb-2 mb-2">Hover over this</h4>
//         <div class="card__content">
//           <p>Notice how it shadows on hover</p>
//         </div>
//       </div>
//     </div>
//   </div>
// <section>
//
// Styleguide Utilities.ShadowHover
.hover-shadow {
  transition: config.$transitions;

  &:hover {
    box-shadow: 0 0 6px 3px map.get(variables.$greyscale, 'lighter' );
  }
}


// Transition
//
// Using the `transition` class adds `transition: .2s;` to an element. You could use this to make specific hover effects by toggling a class.
// For example, if you wanted the border-color on a `card` to change on a click, you could add the `transition` class, and toggle the class `border--color-{color}`.
//
// Styleguide Utilities.Transition

.transition {
  transition: config.$transitions;
}

.scrollbar {
  @extend %scrollbar;
}

// Truncate with ellipsis
//
// A utility that does what it's name says. It truncates text within an element with ellipsis.
//
// Styleguide Utilities.Ellipsis

.truncate-with-ellipsis {
  @extend %truncate-with-ellipsis;
}
